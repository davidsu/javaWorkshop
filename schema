DROP DATABASE IF EXISTS java_workshop;
CREATE DATABASE java_workshop;
use java_workshop;

-- table creation
CREATE TABLE users(
    id int NOT NULL AUTO_INCREMENT,
    full_name VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    UNIQUE(email),
    PRIMARY KEY (id)
);

CREATE TABLE products(
    id int NOT NULL AUTO_INCREMENT,
    productName VARCHAR(50),
    PRIMARY KEY (id)
);

CREATE TABLE taskTypes(
    id int NOT NULL AUTO_INCREMENT,
    taskType VARCHAR(50),
    PRIMARY KEY (id)
);

CREATE TABLE environments(
    id int NOT NULL AUTO_INCREMENT,
    envName VARCHAR(50),
    PRIMARY KEY (id)
);

CREATE TABLE priority(
    id int NOT NULL AUTO_INCREMENT,
    priorityName VARCHAR(50),
    PRIMARY KEY (id)
);

CREATE TABLE status(
    id int NOT NULL AUTO_INCREMENT,
    statusName VARCHAR(50),
    PRIMARY KEY (id)
);


CREATE TABLE tasks(
    id int NOT NULL AUTO_INCREMENT,
    taskTypeId int,
    productId int,
    envId int,
    requesterId int,
    priorityId int,
    open_date DATE NOT NULL,
    exec_date DATE,
    statusId int,
    qaGO bool,
    rollBack bool,
    urgent bool,
    additionalInfo TEXT,
    assigneeId int,
    resolved_by_Id int,
    -- you can't delete a user from the database without first assigning its tasks to some other user
    FOREIGN KEY (requesterId) REFERENCES users(id) ON DELETE RESTRICT,
    FOREIGN KEY (assigneeId) REFERENCES users(id) ON DELETE RESTRICT,
    FOREIGN KEY (resolved_by_Id) REFERENCES users(id) ON DELETE RESTRICT,
    FOREIGN KEY (taskTypeId) REFERENCES taskTypes(id) ON DELETE RESTRICT,
    FOREIGN KEY (productId) REFERENCES products(id) ON DELETE RESTRICT,
    FOREIGN KEY (envId) REFERENCES environments(id) ON DELETE RESTRICT,
    FOREIGN KEY (priorityId) REFERENCES priority(id) ON DELETE RESTRICT,
    FOREIGN KEY (statusId) REFERENCES status(id) ON DELETE RESTRICT,
    PRIMARY KEY (id)
);

-- populate some basic data
INSERT INTO users (full_name,type,email,password) VALUES ('David Susskind', 'admin', 'dchamud@gmail.com', 'bla');
INSERT INTO users (full_name,type,email,password) VALUES ('Barak Obama', 'admin', 'barakobama@gmail.com',  'bla');
INSERT INTO users (full_name,type,email,password) VALUES ('Luiz Inacio', 'admin', 'luizinacio@gmail.com', 'bla');
INSERT INTO users (full_name,type,email,password) VALUES ('Alon Dangaur', 'admin', 'alondx2@gmail.com', 'bla');
INSERT INTO users (full_name,type,email,password) VALUES ('benjamin netanyahu', 'admin', 'benjaminnetanyahu@gmail.com', 'bla');


INSERT INTO products (productName) VALUES ('WebApp1');
INSERT INTO products (productName) VALUES ('WebApp2');

INSERT INTO taskTypes (taskType) VALUES ('Installation');
INSERT INTO taskTypes (taskType) VALUES ('Configuration');

INSERT INTO environments (envName) VALUES ('Beta');
INSERT INTO environments (envName) VALUES ('UAT');
INSERT INTO environments (envName) VALUES ('Production');

INSERT INTO status (statusName) VALUES ('New');
INSERT INTO status (statusName) VALUES ('In Progress');
INSERT INTO status (statusName) VALUES ('In QA Progress');
INSERT INTO status (statusName) VALUES ('Done');
INSERT INTO status (statusName) VALUES ('Fail');

INSERT INTO priority (priorityName) VALUES ('High');
INSERT INTO priority (priorityName) VALUES ('Medium');
INSERT INTO priority (priorityName) VALUES ('Low');
INSERT INTO priority (priorityName) VALUES ('Irrelevant');

DROP PROCEDURE IF EXISTS `addTask`;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addTask`
(
    IN taskTypeId int,
    IN productId int,
    IN envId int,
    IN requesterId int,
    IN priorityId int,
    IN open_date DATE,
    IN statusId int,
    IN qaGO bool,
    IN rollBack bool,
    IN urgent bool,
    IN additionalInfo TEXT
)
BEGIN
     INSERT INTO tasks (taskTypeId,productId,envId,requesterId,priorityId,open_date,exec_date,statusId,qaGO,rollBack,urgent,additionalInfo,assigneeId,resolved_by_Id)
     VALUE (taskTypeId,productId,envId,requesterId,priorityId,open_date,NULL,statusId,qaGO,rollBack,urgent,additionalInfo,NULL,NULL);
END;
$$


INSERT INTO tasks (taskTypeId,productId,envId,requesterId,priorityId,open_date,exec_date,statusId,qaGO,rollBack,urgent,additionalInfo,assigneeId,resolved_by_Id)
VALUE (1, 1, 3, 2, 1, '2017-03-11', NULL, 1, 1, 1, 0, NULL, NULL, NULL);

CALL addTask (1, 2, 3, 1, 2, '2017-03-11',1, 1, 1, 0,'this is a test' );


INSERT INTO tasks (taskTypeId,productId,envId,requesterId,priorityId,open_date,exec_date,statusId,qaGO,rollBack,urgent,additionalInfo,assigneeId,resolved_by_Id)
VALUE (1, 1, 3, 2, 1, '2017-03-11', '2017-03-10', 1, 1, 1, 0, NULL, NULL, NULL);
INSERT INTO tasks (taskTypeId,productId,envId,requesterId,priorityId,open_date,exec_date,statusId,qaGO,rollBack,urgent,additionalInfo,assigneeId,resolved_by_Id)
VALUE (1, 1, 3, 2, 1, '2017-03-09', '2017-03-10', 2, 1, 1, 0, NULL, NULL, NULL);
INSERT INTO tasks (taskTypeId,productId,envId,requesterId,priorityId,open_date,exec_date,statusId,qaGO,rollBack,urgent,additionalInfo,assigneeId,resolved_by_Id)
VALUE (1, 1, 3, 2, 1, '2017-03-15', '2017-03-17', 1, 1, 1, 0, NULL, NULL, NULL);